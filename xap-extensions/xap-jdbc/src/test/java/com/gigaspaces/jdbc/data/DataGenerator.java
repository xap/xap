package com.gigaspaces.jdbc.data;

import org.openspaces.core.GigaSpace;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

public class DataGenerator {
    private static final SimpleDateFormat simpleDateWithTimeFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    private static final SimpleDateFormat simpleDateWithoutTimeFormat = new SimpleDateFormat("dd/MM/yyyy");

    public static final String SELECT_ALL_COLUMNS_FOR_STUDENT = "age, car_id, driving_license_id, email, first_name, grade, id, last_name";
    public static final String SELECT_ALL_COLUMNS_FOR_EMPLOYEE = "age, ageAsShort, birthDateAsLong, birthDateSQL, birthTime, email, first_name, id, last_name, seniority, tenured, timestamp";

    public static void writeEmployee(GigaSpace gigaSpace) {
        final Employee[] employee = {
                new Employee("1", "Mishel", "Ericsson", "mishel.ericsson@outlook.com", 23, 1.5D)
                , new Employee("2", "Daniel", "Jefferson", "daniel.jefferson@outlook.com", 54, 15D)
                , new Employee("3", "Efrat", "Jackson", "efrat.jackson@gmail.com", 25, 3.25D)
                , new Employee("4", "Noam", "Cohen", "noam.cohen@walla.com", 30, 1.5D)
                , new Employee("5", "Yoav", "Avihu", "yoav.avihu@avihu.com", 44, 7.25D)
                , new Employee("6", "Sagiv", "Smith", "sagiv.smith@gmail.com", 27, 0.5D)
                , new Employee("7", "Meshi", "Ashkenazi", "meshi.ashkenazi@gmail.com", 70, 2.5D)
        };

        gigaSpace.writeMultiple(employee);
    }

    public static void writeAutoGeneratedEmployee(GigaSpace gigaSpace) {
        final AutoGeneratedEmployee[] employee = {
                new AutoGeneratedEmployee("Mishel", "Ericsson", "mishel.ericsson@outlook.com", 23, 1.5D)
                , new AutoGeneratedEmployee("Daniel", "Jefferson", "daniel.jefferson@outlook.com", 54, 15D)
                , new AutoGeneratedEmployee("Efrat", "Jackson", "efrat.jackson@gmail.com", 25, 3.25D)
                , new AutoGeneratedEmployee("Noam", "Cohen", "noam.cohen@walla.com", 30, 1.5D)
                , new AutoGeneratedEmployee("Yoav", "Avihu", "yoav.avihu@avihu.com", 44, 7.25D)
                , new AutoGeneratedEmployee("Sagiv", "Smith", "sagiv.smith@gmail.com", 27, 0.5D)
                , new AutoGeneratedEmployee("Meshi", "Ashkenazi", "meshi.ashkenazi@gmail.com", 70, 2.5D)
        };

        gigaSpace.writeMultiple(employee);
    }

    public static void writeStudents(GigaSpace gigaSpace) {
        final Student[] employee = {
                new Student("1", "Mishel", "Ericsson", "mishel.ericsson@outlook.com", 23, (short)90)
                , new Student("2", "Daniel", "Jefferson", "daniel.jefferson@outlook.com", 54, (short)91)
                , new Student("3", "Efrat", "Jackson", "efrat.jackson@gmail.com", 25, (short)92 )
                , new Student("4", "Noam", "Cohen", "noam.cohen@walla.com", 30, (short) 93)
                , new Student("5", "Yoav", "Avihu", "yoav.avihu@avihu.com", 44, (short)94 )
                , new Student("6", "Sagiv", "Smith", "sagiv.smith@gmail.com", 27, (short)95 )
                , new Student("7", "Meshi", "Ashkenazi", "meshi.ashkenazi@gmail.com", 70, (short)97 )
                , new Student("8", "Charles", "Barkley", "charles.barkley@gmail.com", 58, (short)89, "112233", 123 )
                , new Student("9", "Isiah", "Thomas", "isiah.thomas@gmail.com", 59, (short)85, "123456", 456 )
        };

        gigaSpace.writeMultiple(employee);
    }


    public static void writeEmployeeForDistribution(GigaSpace gigaSpace) {
        Employee[] employees = new Employee[200];
        for (int i = 0; i < 200; i++) {
            switch (i%4) {
                case (0): // 25 big bear, 25 big wolf -> selects: 25 wolf (because there are 50 big and it chooses the lowest size)
                    employees[i] = new Employee(String.valueOf(i+1), "big", i % 8 == 0 ? "bear" : "wolf", "giga@giga.com", i%4, 15D);
                    break;
                case (1): // 10 big bear, 40 big wolf -> selects: 40 wolf
                    employees[i] = new Employee(String.valueOf(i+1),  "big", (i-1) % 20 == 0 ? "bear" : "wolf", "giga@giga.com", i%4, 15D);
                    break;
                case (2): // 50 small bear -> selects: 0 big
                case (3):
                    employees[i] = new Employee(String.valueOf(i+1), "small", "bear", "giga@giga.com", i%4, 15D);
                    break;
            }
        }
        gigaSpace.writeMultiple(employees);
    }

    public static void writeCustomer(GigaSpace gigaSpace) {
        final Customer[] customers = {
                new Customer("1", "Mishel", "Ericsson", "mishel.ericsson@outlook.com")
                , new Customer("2", "Daniel", "Jefferson", "daniel.jefferson@outlook.com")
                , new Customer("3", "Efrat", "Jackson", "efrat.jackson@gmail.com")
                , new Customer("4", "Noam", "Cohen", "noam.cohen@walla.com")
                , new Customer("5", "Yoav", "Avihu", "yoav.avihu@avihu.com")
                , new Customer("6", "Sagiv", "Smith", "sagiv.smith@gmail.com")
                , new Customer("7", "Meshi", "Jones", "meshi.jones@gmail.com")
                , new Customer("8", "Alon", "James", "alon.james@gmail.com")
        };

        gigaSpace.writeMultiple(customers);
    }

    public static void writeProduct(GigaSpace gigaSpace) {
        final Product[] products = {
                new Product("1", "ipad", "Electronics")
                , new Product("2", "television", "Electronics")
                , new Product("3", "hammer", "Home")
                , new Product("4", "towel", "Home")
                , new Product("5", "jeans", "Fashion")
                , new Product("6", "shirt", "Fashion")
                , new Product("7", "blackberry", "Electronics")
                , new Product("8", "hat", "Fashion")
        };

        gigaSpace.writeMultiple(products);
    }

    public static void writeInventory(GigaSpace gigaSpace) {

        final Inventory[] inventories = {
                new Inventory("1", "Haifa", 10)
                , new Inventory("2", "Ashdod", 15)
                , new Inventory("3", "Tel Aviv", 20)
                , new Inventory("4", "Haifa", 10)
                , new Inventory("5", "Ashdod", 10)
                , new Inventory("6", "Tel Aviv", 10)
                , new Inventory("7", "Haifa", 10)
                , new Inventory("8", "Ashdod", 10)
                , new Inventory("9", "Tel Aviv", 10)
                , new Inventory("10", "Haifa", 10)
                , new Inventory("11", "Ashdod", 10)
                , new Inventory("12", "TelAviv", 10)
        };

        gigaSpace.writeMultiple(inventories);
    }

    public static void writePurchase(GigaSpace gigaSpace) {
        Random random = new Random();
        final Purchase[] purchases = {
                new Purchase(2, "1", "4", String.valueOf(random.nextInt(12) + 1))
                , new Purchase( 10, "6", "4", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(3, "4", "3", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(5, "1", "2", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(4, "2", "5", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(1, "6", "4", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(2, "1", "5", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(6, "1", "6", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(7, "2", "5", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(2, "4", "5", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(3, "5", "2", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(8, "5", "5", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(9, "3", "4", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(4, "1", "3", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(3, "2", "6", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(7, "6", "1", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(6, "3", "3", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(1, "4", "4", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(2, "3", "10", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(3, "4", "11", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(3, "10", "5", String.valueOf(random.nextInt(12) + 1))
                , new Purchase(3, "11", "6", String.valueOf(random.nextInt(12) + 1))
        };

        gigaSpace.writeMultiple(purchases);
    }

    public static void writeEmployeeWithMoreTypes(GigaSpace gigaSpace) throws ParseException {
        Date date1 = simpleDateWithTimeFormat.parse("10/09/2001 05:20:00");
        Date date1WithoutTime = clearTime(date1);
        Date date2 = simpleDateWithTimeFormat.parse("11/09/2001 10:20:00");
        Date date2WithoutTime = clearTime(date2);
        Date date3 = simpleDateWithTimeFormat.parse("12/09/2001 15:20:00");
        Date date3WithoutTime = clearTime(date3);
        Date date4 = simpleDateWithTimeFormat.parse("13/09/2001 20:20:00");
        Date date4WithoutTime = clearTime(date4);
        Date date5 = simpleDateWithTimeFormat.parse("14/09/2001 20:20:00");
        Date date5WithoutTime = clearTime(date5);
        Date date6 = simpleDateWithTimeFormat.parse("15/09/2001 20:20:00");
        Date date6WithoutTime = clearTime(date6);



        final Employee[] employee = {
                new Employee("1", "Mishel", "Ericsson", "mishel.ericsson@outlook.com", 23, 1.5D, true, date1, date1WithoutTime)
                , new Employee("2", "Daniel", "Jefferson", "daniel.jefferson@outlook.com", 53, 15D, false, date2, date2WithoutTime)
                , new Employee("3", "Efrat", "Jackson", "efrat.jackson@gmail.com", 25, 3.25D, true, date3, date3WithoutTime)
                , new Employee("4", "Noam", "Cohen", "noam.cohen@walla.com", 30, 1.5D, false, date4, date4WithoutTime)
                , new Employee("5", "Yoav", "Avihu", "yoav.avihu@avihu.com", 44, 7.25D, false, date5, date5WithoutTime)
                , new Employee("6", "Sagiv", "Smith", "sagiv.smith@gmail.com", 27, 0.5D, true, date6, date6WithoutTime)
        };

        gigaSpace.writeMultiple(employee);
    }

    private static Date clearTime(Date date) throws ParseException {
        return simpleDateWithoutTimeFormat.parse(simpleDateWithTimeFormat.format(date).substring(0, 10));
    }

    public static Date parseDate(String date) throws ParseException {
        return simpleDateWithTimeFormat.parse(date);
    }


}
